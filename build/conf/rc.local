#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  echo "My internal IP address is $_IP"
fi

SYS_BLOCK=/sys/block/mmcblk0
QUEUE=$SYS_BLOCK/queue
IOSCHED=${QUEUE}/iosched
VAR_LOG=/var/log
VAR_RUN=/var/run

NGINX_LOG=${VAR_LOG}/nginx
UNBOUND_LOG=${VAR_LOG}/unbound

MYSQL_LOG=${VAR_LOG}/mysql
REDIS_LOG=${VAR_LOG}/redis

MYSQL_SOCKET_FOLDER=${VAR_RUN}/mysqld
MYSQL_SOCKET=${MYSQL_SOCKET_FOLDER}/mysqld.sock

groupExists()
{
  local CHECK_GROUP=${1};
  # shellcheck disable=SC2155
  local GROUP_EXISTS=$(getent group | cut -d: -f1 | grep -c "$CHECK_GROUP");
  return "$GROUP_EXISTS";
}

configureUsers()
{
  local EXISTS_WWW_DATA=groupExists "www-data";

  if [[ $EXISTS_WWW_DATA == 0 ]]; then
    echo "CREATED www-data user";
    groupAdd www-data
  fi

  local EXISTS_MYSQL=groupExists "mysql";

  if [[ $EXISTS_MYSQL == 0 ]]; then
    echo "CREATED mysql group";
    groupAdd mysql;
  fi

  local EXISTS_REDIS=groupExists "redis";

  if [[ $EXISTS_REDIS == 0 ]]; then
    echo "CREATED redis group"
    groupAdd redis;
  fi

  local EXISTS_UNBOUND=groupExists "unbound";

  if [[ $EXISTS_UNBOUND == 0 ]]; then
    echo "CREATED unbound group"
    groupAdd unbound;
  fi

  usermod -aG mysql redis;
  usermod -aG mysql www-data;
  usermod -aG mysql unbound;

  usermod -aG redis www-data;
  usermod -aG redis mysql;
  usermod -aG redis unbound;

  usermod -aG www-data mysql;
  usermod -aG www-data redis;
  usermod -aG www-data unbound;
}

configureScheduler()
{
  echo mq-deadline > "${QUEUE}"/scheduler

  echo "CONFIGURED MQ_DEADLINE"

  echo 100 > "${IOSCHED}"/read_expire

  echo "CONFIGURED READ_EXPIRE"

  echo 4 > "${IOSCHED}"/writes_starved

  echo "CONFIGURED WRITES_STARVED"

  echo 192 > "${QUEUE}"/nr_requests

  echo "CONFIGURED NR_REQUESTS"
}

configureInterface()
{
  ethtool -C eth0
  ethtool -A eth0 rx on
  ethtool -A eth0 tx on

  ethtool -K eth0 gro on -K eth0 rx-udp-gro-forwarding on

  echo 13888 > /proc/sys/net/core/netdev_max_backlog
}

createLogFiles()
{
  //770not-R
  mkdir -p $NGINX_LOG
  touch "${NGINX_LOG}"/access.config;
  touch "${NGINX_LOG}"/error.log

  echo "CREATED NGINX LOG ACCES, ERROR FILES"
  //660

  mkdir -p $MYSQL_LOG
  touch "${MYSQL_LOG}"/slow.log

  echo "CREATED MARIADB LOG FILE"

  mkdir -p $REDIS_LOG
  touch "${REDIS_LOG}"/redis-server.log

  echo "CREATED REDIS SERVER LOG"

  mkdir -p $UNBOUND_LOG
  touch "${UNBOUND_LOG}"/unbound.log

  echo "CREATED UNBOUND LOG";
}

configureLogPermissions()
{
  //read,write,exec
  chown -R  www-data:www-data $NGINX_LOG;
  chmod 770 $NGINX_LOG;
  chmod -R 660 "${NGINX_LOG}"/*;

  echo "CONFIGURED NGINX LOG PERMISSIONS"

  chown -R mysql:mysql $MYSQL_LOG;
  chmod 770 $MYSQL_LOG;
  chmod -R 660 "${MYSQL_LOG}"/*

  echo "CONFIGURED MARIADB LOG PERMISSIONS";

  //read,write
  chown redis:redis $REDIS_LOG;
  chmod 770 ${REDIS_LOG};
  chmod -R 660 "${REDIS_LOG}"/*

  echo "CONFIGURED REDIS LOG PERMISSIONS"

  chown unbound:unbound $UNBOUND_LOG;
  chmod 770 $UNBOUND_LOG;
  chmod -R 660 "${UNBOUND_LOG}"/*;

  echo "CONFIGURED UNBOUND LOG PERMISSIONS";
}

configureMariaDbSocket()
{
  chown mysql:root $MYSQL_SOCKET_FOLDER

  chown mysql:mysql $MYSQL_SOCKET
  chmod 777 $MYSQL_SOCKET
}

configureSysCtl()
{
  sysctl -w "vm.overcommit_memory=1"
  echo "Setting vm.overcommit_memory = 1"

  sysctl -w "vm.swappiness=1"
  echo "Setting vm.swappiness = 1"

  sysctl -w "fs.file-max=524280"
  echo "Setting fs.file-max=524280"

  sysctl -w "net.ipv4.ip_unprivileged_port_start=1024"
  echo "Setting net.ipv4.ip_unprivileged_port_start = 1024"

  echo never | tee /sys/kernel/mm/transparent_hugepage/enabled /sys/kernel/mm/transparent_hugepage/defrag > /dev/null
  echo "Disabling hugepages & defrag"

  echo "Reloading systemd configuration"
  sysctl -p
}

configureInterface
configureSchdeduler
configureSysCtl

createUsers
createLogFiles
configureLogPermissions

exit 0
