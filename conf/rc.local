#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  echo "My internal IP address is $_IP"
fi

SYS_BLOCK=/sys/block/mmcblk0
QUEUE=$SYS_BLOCK/queue
IOSCHED=${QUEUE}/iosched
VAR_LOG=/tmp
VAR_RUN=/run

NGINX_LOG=$VAR_LOG/nginx
UNBOUND_LOG=$VAR_LOG/unbound
MYSQL_LOG=$VAR_LOG/mysql
REDIS_LOG=$VAR_LOG/redis

MYSQL_SOCKET_FOLDER=$VAR_RUN/mysqld
REDIS_SOCKET_FOLDER=$VAR_RUN/redis

MYSQL_SOCKET_FILE=$MYSQL_SOCKET_FOLDER/mysqld.sock
REDIS_SOCKET_FILE=$REDIS_SOCKET_FOLDER/redis-server.sock

REDIS_PID_FILE=$REDIS_SOCKET_FOLDER/redis-server.pid
configureUsers()
{
  usermod -aG mysql redis;
  usermod -aG mysql www-data;
  usermod -aG mysql unbound;

  usermod -aG redis www-data;
  usermod -aG redis mysql;
  usermod -aG redis unbound;

  usermod -aG www-data mysql;
  usermod -aG www-data redis;
  usermod -aG www-data unbound;

  echo "GRANTED USER & GROUP PERMISSIONS"
}

configureScheduler()
{
  echo mq-deadline > $QUEUE/scheduler

  echo "CONFIGURED MQ_DEADLINE"

  echo 100 > $IOSCHED/read_expire

  echo "CONFIGURED READ_EXPIRE"

  echo 4 > $IOSCHED/writes_starved

  echo "CONFIGURED WRITES_STARVED"

  echo 192 > $QUEUE/nr_requests

  echo "CONFIGURED NR_REQUESTS"
}

configureInterface()
{
  ethtool -C eth0
  ethtool -A eth0 rx on
  ethtool -A eth0 tx on

  ethtool -K eth0 gro on
  ethtool -K eth0 rx-udp-gro-forwarding on

  echo 13888 > /proc/sys/net/core/netdev_max_backlog
}

createLogFiles()
{
  mkdir -p $NGINX_LOG
  mkdir $NGINX_LOG/cache

  touch $NGINX_LOG/access.log;
  touch $NGINX_LOG/error.log

  mkdir -p /var/log/nginx
  touch /var/log/nginx/access.log
  touch /var/log/nginx/error.log

  echo "CREATED NGINX LOG ACCESS & ERROR FILES"

  mkdir -p $MYSQL_LOG
  touch $MYSQL_LOG/slow.log

  echo "CREATED MARIADB LOG FILE"

  mkdir -p $REDIS_LOG
  touch $REDIS_LOG/redis-server.log

  echo "CREATED REDIS SERVER LOG"

  mkdir -p $UNBOUND_LOG
  touch $UNBOUND_LOG/unbound.log

  echo "CREATED UNBOUND LOG";
}

configureLogPermissions()
{
  #//read,write,exec
  chown -R www-data:www-data $NGINX_LOG;
  chmod -R 770 $NGINX_LOG

  echo "CONFIGURED NGINX LOG PERMISSIONS"

  chown -R mysql:mysql $MYSQL_LOG;
  chmod -R 770 $MYSQL_LOG;

  echo "CONFIGURED MARIADB LOG PERMISSIONS";

  #//read,write
  chown -R redis:redis $REDIS_LOG;
  chmod -R 770 $REDIS_LOG;

  echo "CONFIGURED REDIS LOG PERMISSIONS"

  chown -R unbound:unbound $UNBOUND_LOG;
  chmod -R 770 $UNBOUND_LOG

  echo "CONFIGURED UNBOUND LOG PERMISSIONS";
}

configureSockets()
{
  mkdir -p $MYSQL_SOCKET_FOLDER
  touch $MYSQL_SOCKET_FILE

  echo "CREATED MYSQL SOCKET FOLDER & CREATED SOCKET FILE"

  chown -R mysql:mysql $MYSQL_SOCKET_FOLDER
  chmod 755 $MYSQL_SOCKET_FOLDER

  chmod 660 $MYSQL_SOCKET_FILE

  echo "SET MYSQL SOCKET FILE PERMISSIONS & OWNERSHIP"

  mkdir -p $REDIS_SOCKET_FOLDER
  touch $REDIS_SOCKET_FILE
  touch $REDIS_PID_FILE

  echo "CREATED REDIS SOCKET FOLDER & CREATED SOCKET/PID FILE"

  chown -R redis:redis $REDIS_SOCKET_FOLDER
  chmod 755 $REDIS_SOCKET_FOLDER

  chmod 660 $REDIS_SOCKET_FILE
  chmod 660 $REDIS_PID_FILE

  echo "SET REDIS SOCKET DIRECTORY PERMISSIONS & OWNERSHIP"
}

configureSysCtl()
{
  sysctl -w "vm.overcommit_memory=1"
  echo "Setting vm.overcommit_memory = 1"

  sysctl -w "vm.swappiness=1"
  echo "Setting vm.swappiness = 1"

  sysctl -w "fs.file-max=524280"
  echo "Setting fs.file-max=524280"

  sysctl -w "net.ipv4.ip_unprivileged_port_start=1024"
  echo "Setting net.ipv4.ip_unprivileged_port_start = 1024"

  echo "Trying to disable hugepages & defrag"

  if [ -f /sys/kernel/mm/transparent_hugepage/enabled ]; then
    echo never | tee /sys/kernel/mm/transparent_hugepage/enabled
    echo "Disabled hugepages"
  fi

  if [ -f /sys/kernel/mm/transparent_hugepage/defrag ]; then
    echo never | tee sys/kernel/mm/transparent_hugepage/defrag
    echo "Disabled hugepage defragmentation"
  fi

  echo "Reloading systemd configuration"
  sysctl -p
}

configureInterface
configureScheduler
configureSysCtl

configureUsers

createLogFiles
configureLogPermissions

configureSockets

service redis start

exit 0
